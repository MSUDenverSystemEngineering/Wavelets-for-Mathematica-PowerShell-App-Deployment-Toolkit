(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     75838,       1661]
NotebookOptionsPosition[     71147,       1520]
NotebookOutlinePosition[     73578,       1584]
CellTagsIndexPosition[     73456,       1578]
WindowTitle->SecondParameter
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {Cell["WAVELET WARE PACKAGE SYMBOL", "PacletNameCell"], Cell[TextData[{
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "See Also",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"See Also", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"BestBasisTree\"\>":>
       Documentation`HelpLookup[
       "paclet:WaveletWare/ref/BestBasisTree"], "\<\"WPT\"\>":>
       Documentation`HelpLookup[
       "paclet:WaveletWare/ref/WPT"], "\<\"CostFunction\"\>":>
       Documentation`HelpLookup[
       "paclet:WaveletWare/ref/CostFunction"], "\<\"NumberAboveThreshold\"\>":>
       Documentation`HelpLookup[
       "paclet:WaveletWare/ref/NumberAboveThreshold"], "\<\"SumOfPowers\"\>":>
       Documentation`HelpLookup["paclet:WaveletWare/ref/SumOfPowers"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"SeeAlso"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Related Guides",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"Related Guides", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"List of Options and Values\"\>":>
       Documentation`HelpLookup[
       "paclet:WaveletWare/guide/List of Options and Values"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"MoreAbout"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "URL",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"URL", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"WaveletWare/ref/SecondParameter\"\>":>
       None, "\<\"Copy Wolfram Documentation Center URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell["WaveletWare/ref/SecondParameter"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; Null], 
       Delimiter, "\<\"Copy web URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell[
              BoxData[
               MakeBoxes[
                Hyperlink[
                "http://reference.wolfram.com/language/WaveletWare/ref/\
SecondParameter.html"], StandardForm]], "Input", TextClipboardType -> 
              "PlainText"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; 
        Null], "\<\"Go to web URL\"\>":>FrontEndExecute[{
         NotebookLocate[{
           URL[
            StringJoin[
             If[
              TrueQ[DocumentationBuild`Make`Private`wsmlinkQ$100631], 
              "http://reference.wolfram.com/system-modeler/", 
              "http://reference.wolfram.com/language/"], 
             "WaveletWare/ref/SecondParameter", ".html"]], None}]}]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"URLMenu"]],
      LineSpacing->{1.4, 0}]
    }], "AnchorBar"]}
  }]], "AnchorBarGrid",
 CellID->1],

Cell[TextData[{
 Cell["SecondParameter", "ObjectName"],
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{8, 0}],
    CacheGraphics->False],
   Spacer[8]]]],
 Cell[BoxData[""], "ObjectNameTranslation"]
}], "ObjectNameGrid"],

Cell[CellGroupData[{

Cell[BoxData[GridBox[{
   {"", Cell[TextData[{
     Cell[BoxData["SecondParameter"], "InlineFormula"],
     "\[LineSeparator]is an option for ",
     Cell[BoxData[
      TemplateBox[{Cell[
         TextData["BestBasisTree"]],"paclet:WaveletWare/ref/BestBasisTree"},
       "RefLink",
       BaseStyle->"InlineFormula"]], "InlineFormula"],
     " and ",
     Cell[BoxData[
      TemplateBox[{Cell[
         TextData["WPT"]],"paclet:WaveletWare/ref/WPT"},
       "RefLink",
       BaseStyle->"InlineFormula"]], "InlineFormula"],
     " that allows a user to input a cost function that has a second \
parameter."
    }]]}
  }]], "Usage",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "ColumnsIndexed" -> {}, "Rows" -> {{None}}, 
   "RowsIndexed" -> {}}}],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 ButtonBox[Cell[TextData[{
   Cell[BoxData[
    InterpretationBox[
     StyleBox[
      GraphicsBox[{},
       BaselinePosition->Baseline,
       ImageSize->{6, 0}],
      CacheGraphics->False],
     Spacer[6]]]],
   "Details"
  }], "NotesFrameText"],
  Appearance->{Automatic, None},
  BaseStyle->None,
  ButtonFunction:>(FrontEndExecute[{
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], All, ButtonCell], 
     FrontEndToken["OpenCloseGroup"], 
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], After, CellContents]}]& ),
  Evaluator->None,
  Method->"Preemptive"]]]], "NotesSection",
 WholeCellGroupOpener->True,
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->16427392],

Cell["", "SectionHeaderSpacer"],

Cell[TextData[{
 "The cost functions in the ",
 ButtonBox["WaveletWare",
  BaseStyle->"Link",
  ButtonData->"paclet:WaveletWare/tutorial/WaveletWare Package"],
 " package requiring second parameters are ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NumberAboveThreshold"]],
    "paclet:WaveletWare/ref/NumberAboveThreshold"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["SumOfPowers"]],"paclet:WaveletWare/ref/SumOfPowers"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Notes",
 CellID->1067943069],

Cell["\<\
It is possible to define a cost function that has a second parameter - see \
below.\
\>", "Notes",
 CellID->635365354],

Cell["", "SectionFooterSpacer"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount"]
}], "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellTags->"PrimaryExamplesSection",
 CellID->65554767],

Cell[CellGroupData[{

Cell[TextData[{
 "Basic Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->281976076],

Cell["This loads the package:", "MathCaption",
 CellID->16454449],

Cell[BoxData[
 RowBox[{"<<", "WaveletWare`"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[1]:=",
 CellID->861618089],

Cell[TextData[{
 "Some costs functions (e.g., ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NumberAboveThreshold"]],
    "paclet:WaveletWare/ref/NumberAboveThreshold"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " or ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["SumOfPowers"]],"paclet:WaveletWare/ref/SumOfPowers"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ") require a second parameter.  "
}], "ExampleText",
 CellID->14018720],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "40"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"Range", "[", "n", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ListPlot", "[", 
   RowBox[{"v", ",", 
    RowBox[{"Ticks", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", "n", ",", 
         RowBox[{"n", "/", "4"}]}], "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "1"}], "/", "2"}], ",", 
         RowBox[{"1", "/", "2"}]}], "]"}]}], "}"}]}], ",", 
    RowBox[{"PlotLabel", "\[Rule]", "\"\<Data Samples\>\""}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"iterations", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"wptfull", "=", 
   RowBox[{"WPTFull", "[", 
    RowBox[{"v", ",", 
     RowBox[{"SplineFilters", "[", 
      RowBox[{"2", ",", "2"}], "]"}], ",", 
     RowBox[{"NumIterations", "\[Rule]", "iterations"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GraphicsGrid", "[", 
   RowBox[{
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"FullWaveletVectorPlot", "[", "wptfull", "]"}], ",", "2"}], 
     "]"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "400"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"tree", "=", 
  RowBox[{"BestBasisTree", "[", 
   RowBox[{"wptfull", ",", 
    RowBox[{"CostFunction", "\[Rule]", "SumOfPowers"}], ",", 
    RowBox[{"SecondParameter", "\[Rule]", "2"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowBestBasis", "[", "tree", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"tree", "=", 
  RowBox[{"BestBasisTree", "[", 
   RowBox[{"wptfull", ",", 
    RowBox[{"CostFunction", "\[Rule]", "SumOfPowers"}], ",", 
    RowBox[{"SecondParameter", "\[Rule]", ".5"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ShowBestBasis", "[", "tree", "]"}]}], "Input",
 CellLabel->"In[2]:=",
 CellID->79184216],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdxUsKgmAUQOGLI4cOHDRwkBIhIZKP0sxntQKXIDh2C/+SXUJJINxz4PD5
0zLOloiEvzf/rZ1Weq0NHejCA/TgEQbwBM8whBcYwRheYQJTmMEc3uAdFrCE
D1jBJ6xhA1vYwV5roAxaA+WlNVDeWgPls/sFkNUqdA==
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Data Samples\"", TraditionalForm],
  PlotRange->{{0., 40.}, {0, 40.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{{{0, 
      FormBox["0", TraditionalForm]}, {10, 
      FormBox["10", TraditionalForm]}, {20, 
      FormBox["20", TraditionalForm]}, {30, 
      FormBox["30", TraditionalForm]}, {40, 
      FormBox["40", TraditionalForm]}}, {{
      NCache[
       Rational[-1, 2], -0.5], 
      FormBox[
       RowBox[{"-", 
         FractionBox["1", "2"]}], TraditionalForm]}, {
      NCache[
       Rational[1, 2], 0.5], 
      FormBox[
       FractionBox["1", "2"], TraditionalForm]}}}]], "Output",
 ImageSize->{244, 169},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->42160184],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
AAAAAAAAAADQNP8HyVvg5Q==
    "], {{0, 248}, {400, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{400, 248},
  PlotRange->{{0, 400}, {0, 248}}]], "Output",
 ImageSize->{404, 248},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[2]=",
 CellID->130792452],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}]}], "}"}]], "Output",
 ImageSize->{319, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->304939459],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{0, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{1, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{2, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{3, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{4, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{5, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{6, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{7, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{0, 1}, {2, 2}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{2, 1}, {4, 2}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{4, 1}, {6, 2}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{6, 1}, {8, 2}]}, 
   {RGBColor[
    0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`], 
    EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{0, 2}, {4, 3}]}, 
   {RGBColor[
    0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`], 
    EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{4, 2}, {8, 3}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{0, 3}, {8, 4}]}},
  ImageSize->Automatic]], "Output",
 ImageSize->{244, 125},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->391325285],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}]}], "}"}]], "Output",
 ImageSize->{319, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->137441584],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[
    0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`], 
    EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], RectangleBox[{0, 0}]}, 
   {RGBColor[
    0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`], 
    EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], RectangleBox[{1, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{2, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{3, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{4, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{5, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{6, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{7, 0}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{0, 1}, {2, 2}]}, 
   {RGBColor[
    0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`], 
    EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{2, 1}, {4, 2}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{4, 1}, {6, 2}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{6, 1}, {8, 2}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{0, 2}, {4, 3}]}, 
   {RGBColor[
    0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`], 
    EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{4, 2}, {8, 3}]}, 
   {RGBColor[1., 1., 1.], EdgeForm[{RGBColor[0., 0., 0.], Thickness[Large]}], 
    RectangleBox[{0, 3}, {8, 4}]}},
  ImageSize->Automatic]], "Output",
 ImageSize->{244, 125},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->177864444]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->401679040],

Cell["\<\
Create a cost function and use it to compute the wavelet package transform of \
a grayscale image.\
\>", "ExampleText",
 CellID->246790858],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"file", "=", 
   RowBox[{
    RowBox[{"PackageDirectory", "[", 
     RowBox[{"DataType", "\[Rule]", "Images"}], "]"}], "<>", 
    "\"\<benches.png\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"ImageRead", "[", 
    RowBox[{"file", ",", 
     RowBox[{"Resize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"128", ",", "192"}], "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ImagePlot", "[", "A", "]"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Log", " ", "energy", " ", "cost", " ", "function"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MyCost", "[", 
     RowBox[{"t_", ",", "p_"}], "]"}], ":=", 
    RowBox[{"Total", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"#", "\[Equal]", "0"}], ",", "0", ",", 
          RowBox[{"Log", "[", 
           RowBox[{
            RowBox[{"Abs", "[", "#", "]"}], "^", "p"}], "]"}]}], "]"}], "&"}],
        ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{"N", "[", "t", "]"}], "]"}]}], "]"}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"wpt", ",", "tree"}], "}"}], "=", 
   RowBox[{"WPT", "[", 
    RowBox[{"A", ",", 
     RowBox[{"{", 
      RowBox[{".5", ",", ".5"}], "}"}], ",", 
     RowBox[{"NumIterations", "\[Rule]", "3"}], ",", 
     RowBox[{"CostFunction", "\[Rule]", "MyCost"}], ",", 
     RowBox[{"SecondParameter", "\[Rule]", "2"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ShowBestBasis", "[", 
  RowBox[{"tree", ",", 
   RowBox[{"Show3D", "\[Rule]", "False"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "192"}]}], "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->89618226],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3XfUf1V15/E4KRRBEUWNXYMV7MbKWCl2I469oMQ+KkaNioUAQX5gQfmB
8kMBRSQRVBQsiUBER2yoGEMRR7FnbCN2TcAk85r7Xs9ed7Hmv/k3Z63nrvvc
7y3n7P05e++zzz773HTf/fZ+5n/5vd/7vRdv7bD30152vxe96Gn7P2oH/zz6
BS9+zrNe8IynP+gFL3nGs57xorvv+/suHujv4/7+7/l/lv8s/5/lkY985H9b
yhOf+MR99933Wc961ote9KK//uu/Puqoo44++ujDDjvsgAMO+Mu//MtXvepV
Bx100Ktf/Wr/vvjFL3bPwQcffMghh7zmNa/Zf//9X/KSlzi+4hWvcJubX/CC
Fzzvec97/vOf77YXvvCFz33uc73WFef77bef689YytOf/vR99tnnyU9+8lOf
+lQn/t1jjz0e9KAH3fe+973Pfe7zX5ey++67P/rRj3az2564lKc97WnPfOYz
vfDZz372U57yFA+68vSluPKc5zynXx19sc+pj1/968QbVEMl1dmzD3nIQ3zx
wQ9+sAcf97jHPfShD/XrHe94x6td7Wo3utGNbnzjG9/iFrfYeeedb7yUm970
pre61a3uda97ucHJrrvuevvb33633XZT4Xvf+953vvOdb3nLW97whjf0021v
e1u/7rLLLp66wQ1usOOOO17nOte59a1vfY973EMb73//+9/tbndzs5+uf/3r
u9PFP/uzP1OBJz3pSQ972MO883a3u93Nb37zP16KB30Upx71qEc94hGPcAPK
3OlOd/J+n9tmm22837+I9sAHPtDL7373u3vExR122GG77bbbdtttt9566z/5
kz9xv7b4nOq54QEPeIC3+bQT70QEAPjvS3npS1/qi6jx8pe/HIuPPPLI173u
dYcffvjrX/96qDj22GPf8pa3hJ+HP/zhKoZHav7nf/7nWIDpBx54oEfe/OY3
ewRIXvnKV0IOwBy0lJe97GVe6+TgpfjJ54Bn/6X4NZz8xV/8hSOWYY0qxUfF
iSu+BRVYHyT8i+kqjJswc7/73W/PPffs6IbuBCGAceczl6Kq6vy0pWi4Yx/y
HkePOFETRzVxBGNN84aAraquxBHf9Sw6OHcRI3D2ete7Hu7caClQhJuID0LX
uta1gAH3//RP/xQfgQe/cOQud7kLFPkXSO5whztgU8y611IgDa68BB+dQOA9
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
f0lhNsk=
    "], {{0, 128}, {192, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> Automatic, ImageResolution -> Automatic, 
    Interleaving -> True, Magnification -> Automatic, MetaInformation -> {}],
   Selectable->False],
  AlignmentPoint->Center,
  BaselinePosition->Automatic,
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{192, 128},
  PlotRange->{{0, 192}, {0, 128}}]], "Output",
 ImageSize->{196, 128},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->657819733],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztlUFKQ0EQRAfduPQKXsGVW5duIx4gwRjcRIiCeDtvpl/GRZiZdPdPTWda
qYKIaaa6ivmP/KvVy+LpLKX0ejH9WSzfb3e75cf95fTlYfv6vNmuH++2b+vN
enezOp+G19Pnc/r8/P9FURQ1TimAIvcJWGl0l1/FKRPtcsiPRftljv31QlWn
g3087PJONbG7PU8e9lRMZn09+ryxv6vID/lBRH7IDyLyQ34QkZ+j+RkuY39X
1elgHw+7vFNN7G73Q2KWjP1dVaeDfTzs8k41sbs9T/j+aqaTH/UA+SmuQp6A
C3E7+SE/iD0FULQ+ifyY7ad9LG1F65PIj9ku71QTu9vzhO+vZjr5UQ+Qn+Iq
5Am4ELeTH/KD2GPyM1zG/q6q08E+HnZ5p5rY3e6HxCwZ+7uqTgf7eNjlnWpi
d3ue8P3VTCc/6gHyU1yFPAEX4nby8+f4GatmybGK1ieRn8NqlhyraH1SbH46
LsTt8k41sbs9T/j+aqaTH/UA+SmuQp6AC3E7+SE/iJ38kB/EHpOf4TL2d1Wd
DvbxsMs71cTudj8kZsnY31V1OtjHwy7vVBO72/OE769mOvlRD5Cf4irkCbgQ
t5Mf8oPYUwBF65PIj9l+2sfSVrQ+ifyY7fJONbG7PU/4/mqmkx/1APkprkKe
gAtxO/khP4g9Jj/DZezvqjod7ONhl3eqid3tfkjMkrG/q+p0sI+HXd6pJna3
5wnfX8108qMeID/FVcgTcCFuJz8qP2NVX85YNZ/gWEXrk8jPYZEfi4TfTIqi
KIqiqP+qb3AT+lc=
    "], {{0, 50}, {192, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{192, 50},
  PlotRange->{{0, 192}, {0, 50}}]], "Output",
 ImageSize->{196, 50},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[1]=",
 CellID->183382523]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "See Also"
}], "SeeAlsoSection",
 WholeCellGroupOpener->True,
 CellID->1255426704],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["BestBasisTree"]],"paclet:WaveletWare/ref/BestBasisTree"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["WPT"]],"paclet:WaveletWare/ref/WPT"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["CostFunction"]],"paclet:WaveletWare/ref/CostFunction"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NumberAboveThreshold"]],
    "paclet:WaveletWare/ref/NumberAboveThreshold"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["SumOfPowers"]],"paclet:WaveletWare/ref/SumOfPowers"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"]
}], "SeeAlso",
 CellID->929782353]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Related Guides"
}], "MoreAboutSection",
 WholeCellGroupOpener->True,
 CellID->38303248],

Cell["", "SectionHeaderSpacer"],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["List of Options and Values"]],
   "paclet:WaveletWare/guide/List of Options and Values"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->337819797]
}, Open  ]],

Cell[" ", "FooterCell"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{725, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"SecondParameter",
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "SymbolColor", "LinkTrails" -> 
  GridBox[{{
      RowBox[{
        ButtonBox[
        "Mathematica", ButtonData -> "paclet:WaveletWare/guide/WaveletWare", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}}, ColumnAlignments -> 
    Left], "HasOptions" -> False, "ExampleCounter" -> 1, "NeedPlatMsgIn" -> 
  None, "RootCaptions" -> "", 
  "Metadata" -> {
   "built" -> "{2016, 8, 25, 9, 52, 19.8368911}", 
    "history" -> {"XX", "", "", ""}, "context" -> 
    "WaveletWare`PacketTransforms`", "keywords" -> {}, 
    "specialkeywords" -> {}, "tutorialcollectionlinks" -> {}, "index" -> True,
     "label" -> "Wavelet Ware Package Symbol", "language" -> "en", "paclet" -> 
    "WaveletWare Package", "status" -> "None", "summary" -> 
    "SecondParameter is an option for BestBasisTree and WPT that allows a \
user to input a cost function that has a second parameter.", "synonyms" -> {},
     "tabletags" -> {}, "title" -> "SecondParameter", "titlemodifier" -> "", 
    "windowtitle" -> "SecondParameter", "type" -> "Symbol", "uri" -> 
    "WaveletWare/ref/SecondParameter"}, "SearchTextTranslated" -> ""},
CellContext->"Global`",
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Wolfram"}, "Reference.nb"]]], 
   Cell[
    StyleData["Input"], CellContext -> "Global`"], 
   Cell[
    StyleData["Output"], CellContext -> "Global`"]}, Visible -> False, 
  FrontEndVersion -> "11.0 for Microsoft Windows (64-bit) (July 28, 2016)", 
  StyleDefinitions -> "Default.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "PrimaryExamplesSection"->{
  Cell[7362, 224, 386, 15, 30, "PrimaryExamplesSection",
   CellTags->"PrimaryExamplesSection",
   CellID->65554767]},
 "RasterizedOutput"->{
  Cell[12856, 398, 6593, 116, 269, "Output",
   CellTags->"RasterizedOutput",
   CellID->130792452],
  Cell[67306, 1390, 1335, 30, 71, "Output",
   CellTags->"RasterizedOutput",
   CellID->183382523]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"PrimaryExamplesSection", 73089, 1564},
 {"RasterizedOutput", 73231, 1568}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[587, 21, 4054, 98, 48, "AnchorBarGrid",
 CellID->1],
Cell[4644, 121, 292, 11, 44, "ObjectNameGrid"],
Cell[CellGroupData[{
Cell[4961, 136, 771, 22, 83, "Usage"],
Cell[CellGroupData[{
Cell[5757, 162, 737, 24, 31, "NotesSection",
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->16427392],
Cell[6497, 188, 31, 0, 70, "SectionHeaderSpacer"],
Cell[6531, 190, 617, 20, 70, "Notes",
 CellID->1067943069],
Cell[7151, 212, 128, 4, 70, "Notes",
 CellID->635365354],
Cell[7282, 218, 31, 0, 70, "SectionFooterSpacer"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7362, 224, 386, 15, 30, "PrimaryExamplesSection",
 CellTags->"PrimaryExamplesSection",
 CellID->65554767],
Cell[CellGroupData[{
Cell[7773, 243, 195, 6, 25, "ExampleSection",
 CellID->281976076],
Cell[7971, 251, 65, 1, 31, "MathCaption",
 CellID->16454449],
Cell[8039, 254, 126, 4, 42, "Input",
 InitializationCell->True,
 CellID->861618089],
Cell[8168, 260, 493, 16, 50, "ExampleText",
 CellID->14018720],
Cell[CellGroupData[{
Cell[8686, 280, 2045, 58, 235, "Input",
 CellID->79184216],
Cell[10734, 340, 2119, 56, 190, "Output",
 CellID->42160184],
Cell[12856, 398, 6593, 116, 269, "Output",
 CellTags->"RasterizedOutput",
 CellID->130792452],
Cell[19452, 516, 462, 15, 35, "Output",
 CellID->304939459],
Cell[19917, 533, 1985, 41, 146, "Output",
 CellID->391325285],
Cell[21905, 576, 462, 15, 35, "Output",
 CellID->137441584],
Cell[22370, 593, 2103, 43, 146, "Output",
 CellID->177864444]
}, Open  ]],
Cell[CellGroupData[{
Cell[24510, 641, 125, 3, 70, "ExampleDelimiter",
 CellID->401679040],
Cell[24638, 646, 149, 4, 70, "ExampleText",
 CellID->246790858],
Cell[CellGroupData[{
Cell[24812, 654, 1875, 57, 70, "Input",
 CellID->89618226],
Cell[26690, 713, 40613, 675, 149, "Output",
 CellID->657819733],
Cell[67306, 1390, 1335, 30, 71, "Output",
 CellTags->"RasterizedOutput",
 CellID->183382523]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[68680, 1425, 31, 0, 70, "SectionFooterSpacer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68748, 1430, 270, 12, 70, "SeeAlsoSection",
 CellID->1255426704],
Cell[69021, 1444, 1523, 44, 70, "SeeAlso",
 CellID->929782353]
}, Open  ]],
Cell[CellGroupData[{
Cell[70581, 1493, 276, 12, 70, "MoreAboutSection",
 CellID->38303248],
Cell[70860, 1507, 31, 0, 70, "SectionHeaderSpacer"],
Cell[70894, 1509, 211, 6, 70, "MoreAbout",
 CellID->337819797]
}, Open  ]],
Cell[71120, 1518, 23, 0, 70, "FooterCell"]
}
]
*)

(* End of internal cache information *)

